(ns project-euler.problem-002)

;; Problem 2
;;
;; Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
;;
;; 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
;;
;; Find the sum of all the even-valued terms in the sequence which do not exceed four million.
;;
;; http://projecteuler.net/index.php?section=problems&id=2


;; Need a lazy sequence of fibonacci numbers. A recursive routine will not return for 4 million
;; This won't work
(defn fib [x]
  "Return the fibonacci sequence of x numbers"
  (cond 
    (== x 0) 0
    (== x 1) 1
    true
     (+ 
      (fib (- x 1))
      (fib (- x 2)))))
  
;; Nor will this
(defn fib2 [n]
  (loop [a 1 b 0 count n]
    (if (zero? count)
        b
        (recur (+ a b) a (dec count)))))

;; (reduce + (filter even? (range 10)))

(defn sum [fn col]
  (reduce + (filter fn col)))

;; (take-while #(> 4000000 %) )

;; The following is working
;; https://en.wikibooks.org/wiki/Clojure_Programming/Examples/Lazy_Fibonacci
(def fib-seq 
  ((fn rfib [a b] 
     (lazy-seq (cons a (rfib b (+ a b)))))
   0 1))


(defn problem-002
  []
  (reduce + 
          (filter even? (take-while #(< % 4000000) fib-seq))))

;; (problem-002) => 4613732
